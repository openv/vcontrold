name: Builds for Linux
on:
  workflow_call:
    inputs:
      artifact_archive:
        required: true
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build on Ubuntu Linux
      run: |
        sudo apt-get update -y --allow-releaseinfo-change
        sudo apt-get install -y build-essential cmake libxml2-dev python3-docutils zip checkinstall
        mkdir build
        cmake -S . -B ./build  -DCMAKE_C_FLAGS="-Wall" -DCMAKE_VERBOSE_MAKEFILE=ON
        cmake --build ./build
        echo "ARCH=$(dpkg --print-architecture)" > ./build/env

    - name: Set env vars
      run: |
        source ./build/env
        echo "ARCH=${ARCH}">> ${GITHUB_ENV}
        BUILD_DIR="./build"
        echo "BUILD_DIR=${BUILD_DIR}" >> ${GITHUB_ENV}
        VERSION=$(sed -n -e 's/#define VERSION "\(.*\)"/\1/p' ${BUILD_DIR}/version.h)
        if [ "$VERSION" == "unknown" ] ; then VERSION="$(date +0.0.%Y%m%d)" ; fi
        echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
        GH_REPO=$(echo -n "${GITHUB_REPOSITORY}" | cut -d "/" -f 2)
        echo "GH_REPO=${GH_REPO}" >> ${GITHUB_ENV}
        DEPLOYFILEPREFIX="${GH_REPO}_${VERSION}"
        echo DEPLOYFILEPREFIX="${DEPLOYFILEPREFIX}" >> ${GITHUB_ENV}
        DEPLOYFILEPREFIX_BIN="${DEPLOYFILEPREFIX}-${GITHUB_RUN_NUMBER}_${ARCH}"
        echo DEPLOYFILEPREFIX_BIN="${DEPLOYFILEPREFIX_BIN}" >> ${GITHUB_ENV}
        cat ${GITHUB_ENV}

    - name: Checkinstall deb package creation
      run: |
        sudo checkinstall --strip=no --install=no --pkgname="${GH_REPO}" --pkgversion="${VERSION}" --pkgrelease=${GITHUB_RUN_NUMBER} --arch="${ARCH}" --maintainer="${GH_USER}@GitHub" --pkgsource="https://github.com/${GH_USER}/${GH_REPO}/releases/download/v${VERSION}/${DEPLOYFILEPREFIX}.orig.tar.gz" --pkgaltsource="https://github.com/${GH_USER}/${GH_REPO}/" --pkglicense="GPLv3" --pakdir=./build/ -D -y cmake --build ./build/ --target install

    - name: Collect files
      run: |
        sudo chown -R $USER:$USER ./build/
        for FILE in ./build/doc/man/*.1 ; do gzip ${FILE} ; done
        zip -j ./build/${DEPLOYFILEPREFIX_BIN}.zip ./build/vcontrold ./build/vclient ./build/doc/man/vcontrold.1.gz ./build/doc/man/vclient.1.gz COPYING README.md

    - name: Archive Source
      # this is just to provide a *.orig.tar.gz source archive as it is tradition for Debian packages
      run: |
        git archive --prefix "${GH_REPO}-${VERSION}/" -o "./build/${DEPLOYFILEPREFIX}.orig.tar" ${GITHUB_SHA}
        tar -rf "./build/${DEPLOYFILEPREFIX}.orig.tar" --owner=root --group=root --transform="s#^.*build/#${GH_REPO}-${VERSION}/src/#" ./build/version.h
        tar --delete -f "./build/${DEPLOYFILEPREFIX}.orig.tar" --wildcards "${GH_REPO}-${VERSION}/*"
        gzip --best "./build/${DEPLOYFILEPREFIX}.orig.tar"
        tar tzvf "./build/${DEPLOYFILEPREFIX}.orig.tar.gz" --force-local

    - name: Collect files 2
      run: |
        mkdir artifact-upload
        mv ./build/*.zip ./build/*.deb ./build/*.tar.gz ./artifact-upload/
        ls -laF ./artifact-upload/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact_archive }}
        path: |
           artifact-upload/*
        if-no-files-found: error
            

